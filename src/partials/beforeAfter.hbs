<script>
    /*!
 * Before After Viewer - Vanilla JavaScript plugin for Before After Viewer
 *
 * Copyright (c) 2025 (Adapted from MAMEDUL ISLAM's jQuery version)
 * Licensed under the MIT license: https://opensource.org/licenses/MIT
 *
 * Version: 1.0.2
 */
(function () {
  // Default settings
  const defaultSettings = {
    movable: true,
    clickMove: true,
    alwaysShow: true,
    position: 50,
    opacity: 0.5,
    activeOpacity: 1,
    hoverOpacity: 0.75,
    separatorColor: '#02373f',
    bulletColor: '#000',
    arrowColor: '#d3f0a5',
  };

  // Main function to initialize the slider
  function beforeAfter(container, options) {
    console.log('beforeAfter: Initializing slider', container);
    
    // Merge options with defaults
    const settings = Object.assign({}, defaultSettings, options);

    // Validate container has exactly two children
    if (!container || container.children.length !== 2) {
      console.warn(
        '%cWarning: BeforeAfter plugin needs exactly two child elements.',
        'color:#e4672e;font-size:200%;',
        container
      );
      return;
    }

    // Get images
    const firstImg = container.children[0];
    const secondImg = container.children[1];

    // Store original styles
    const baReservedStyle = `position:${container.style.position};overflow:${container.style.overflow}`;
    const fReservedStyle = `position:${firstImg.style.position};top:${firstImg.style.top};left:${firstImg.style.left};width:${firstImg.style.width};height:${firstImg.style.height};z-index:${firstImg.style.zIndex};float:${firstImg.style.cssFloat}`;
    const sReservedStyle = `position:${secondImg.style.position};top:${secondImg.style.top};left:${secondImg.style.left};width:${secondImg.style.width};height:${secondImg.style.height};z-index:${secondImg.style.zIndex}`;

    container.dataset.baReservedStyle = baReservedStyle;
    firstImg.dataset.baReservedStyle = fReservedStyle;
    secondImg.dataset.baReservedStyle = sReservedStyle;

    // Calculate z-index for layering
    const fZIndexInt = isNaN(parseInt(firstImg.style.zIndex)) ? 0 : parseInt(firstImg.style.zIndex);
    const selectNone = 'user-select:none;-webkit-user-select:none;-ms-user-select:none;';

    // Style container
    Object.assign(container.style, {
      position: 'relative',
      overflow: 'hidden',
    });

    // Style first image
    Object.assign(firstImg.style, {
      position: 'relative',
      top: '0',
      left: '0',
      width: '100%',
    });

    // Style second image
    Object.assign(secondImg.style, {
      position: 'absolute',
      top: '0',
      right: '0',
      width: 'auto',
      height: '100%',
      zIndex: fZIndexInt + 1,
    });

    // Create DOM elements
    const div1 = document.createElement('div');
    div1.style.cssText = `position:relative !important;width:100% !important;height:100% !important;${selectNone}`;
    div1.appendChild(firstImg.cloneNode(true));

    const div2 = document.createElement('div');
    div2.style.cssText = `position:absolute !important;width:${settings.position}% !important;height:100% !important;top:0px !important;right:0px !important;overflow:hidden !important;${selectNone}`;
    div2.appendChild(secondImg.cloneNode(true));

    const leftArrow = document.createElement('i');
    leftArrow.style.cssText = `border:solid black;border-width:0 2px 2px 0;display:inline-block;padding:3px;transform:rotate(135deg);vertical-align:middle;border-color:${settings.arrowColor};margin-right:2px;`;

    const rightArrow = document.createElement('i');
    rightArrow.style.cssText = `border:solid black;border-width:2px 0 0 2px;display:inline-block;padding:3px;transform:rotate(135deg);vertical-align:middle;border-color:${settings.arrowColor};margin-left:2px;`;

    const separatorBullet = document.createElement('div');
    separatorBullet.style.cssText = `position:absolute;width:32px;height:32px;display:flex;justify-content:center;align-items:center;top:50%;left:50%;transform:translate(-50%,-50%);border-radius:50%;background-color:${settings.bulletColor};`;

    const separatorContent = document.createElement('div');
    separatorContent.style.cssText = `position:relative;width:100%;height:100%;display:flex;justify-content:center;align-items:center;`;

    const separator = document.createElement('div');
    separator.style.cssText = `position:absolute !important;width:2px !important;height:100% !important;top:0px !important;right:${settings.position}% !important;overflow:visible !important;transform:translateX(50%) !important;background-color:${settings.separatorColor};cursor:e-resize;opacity:${settings.opacity};z-index:${fZIndexInt + 2};${selectNone}`;

    // Assemble separator
    separatorBullet.appendChild(leftArrow);
    separatorBullet.appendChild(rightArrow);
    separatorContent.appendChild(separatorBullet);
    separator.appendChild(separatorContent);

    // Append new elements and remove originals
    container.appendChild(div1);
    container.appendChild(div2);
    container.appendChild(separator);
    firstImg.remove();
    secondImg.remove();

    // Resize handler to sync image sizes
    const resize = () => {
      const div1Img = div1.children[0];
      const div2Img = div2.children[0];
      if (div1Img.offsetWidth > 0) div2Img.style.width = `${div1Img.offsetWidth}px`;
      if (div1Img.offsetHeight > 0) div2Img.style.height = `${div1Img.offsetHeight}px`;
    };
    window.addEventListener('resize', resize);

    // Ensure images are loaded before resizing
    const images = [div1.children[0], div2.children[0]];
    let imagesLoaded = 0;
    const checkImagesLoaded = () => {
      imagesLoaded++;
      if (imagesLoaded === images.length) {
        resize();
      }
    };
    images.forEach(img => {
      if (img.complete) {
        checkImagesLoaded();
      } else {
        img.addEventListener('load', checkImagesLoaded);
        img.addEventListener('error', () => {
          console.warn('Image failed to load:', img.src);
          checkImagesLoaded();
        });
      }
    });

    // Movement logic
    if (settings.movable) {
      let moveEnded = false;

      // Click-to-move functionality
      if (settings.clickMove) {
        div1.addEventListener('click', () => {
          if (settings.onMoveStart) settings.onMoveStart();
          const oWidth = container.offsetWidth;
          const oRight = parseFloat(separator.style.right) || 0;
          const oRightAdd = oRight + Math.min(oWidth * 0.05, 5);
          let oPercentage = (oRightAdd / oWidth) * 100;
          oPercentage = Math.max(0, Math.min(100, oPercentage));
          const correctRight = `${oPercentage.toFixed(2)}%`;
          div2.style.width = correctRight;
          separator.style.right = correctRight;
          if (settings.onMoving) settings.onMoving();
          if (settings.onMoveEnd) settings.onMoveEnd();
        });

        div2.addEventListener('click', () => {
          if (settings.onMoveStart) settings.onMoveStart();
          const oWidth = container.offsetWidth;
          const oRight = parseFloat(separator.style.right) || 0;
          const oRightAdd = oRight - Math.min(oWidth * 0.05, 5);
          let oPercentage = (oRightAdd / oWidth) * 100;
          oPercentage = Math.max(0, Math.min(100, oPercentage));
          const correctRight = `${oPercentage.toFixed(2)}%`;
          div2.style.width = correctRight;
          separator.style.right = correctRight;
          if (settings.onMoving) settings.onMoving();
          if (settings.onMoveEnd) settings.onMoveEnd();
        });
      }

      // Hover effects
      container.addEventListener('mouseenter', () => {
        separator.style.opacity = settings.hoverOpacity;
      });
      container.addEventListener('mouseleave', () => {
        separator.style.opacity = settings.opacity;
      });

      // Mouse/touch movement handler
      const moveHandler = (e) => {
        const clientX = e.pageX || (e.touches && e.touches[0].clientX);
        const oLeft = container.getBoundingClientRect().left;
        const oWidth = container.offsetWidth;
        const oPos = (oLeft + oWidth) - clientX;
        let oPercentage = (oPos / oWidth) * 100;
        oPercentage = Math.max(0, Math.min(100, oPercentage));
        const correctRight = `${oPercentage.toFixed(2)}%`;
        div2.style.width = correctRight;
        separator.style.right = correctRight;
        if (settings.onMoving) settings.onMoving();
      };

      const moveEndHandler = () => {
        moveEnded = true;
        separator.style.opacity = settings.opacity;
        if (settings.onMoveEnd) settings.onMoveEnd();
      };

      // Mouse events
      separator.addEventListener('mousedown', (e) => {
        moveEnded = false;
        separator.style.opacity = settings.activeOpacity;
        if (settings.onMoveStart) settings.onMoveStart();
        document.addEventListener('mousemove', moveHandler);
        const mouseUpHandler = () => {
          document.removeEventListener('mousemove', moveHandler);
          if (!moveEnded) moveEndHandler();
          document.removeEventListener('mouseup', mouseUpHandler);
        };
        document.addEventListener('mouseup', mouseUpHandler);
      });

      // Touch events
      separator.addEventListener('touchstart', (e) => {
        moveEnded = false;
        separator.style.opacity = settings.activeOpacity;
        if (settings.onMoveStart) settings.onMoveStart();
        document.addEventListener('touchmove', moveHandler);
        const touchEndHandler = () => {
          document.removeEventListener('touchmove', moveHandler);
          if (!moveEnded) moveEndHandler();
          document.removeEventListener('touchend', touchEndHandler);
          document.removeEventListener('touchcancel', touchEndHandler);
        };
        document.addEventListener('touchend', touchEndHandler);
        document.addEventListener('touchcancel', touchEndHandler);
      });
    }

    console.log('beforeAfter: Slider initialized successfully');
  }

  // Expose the function globally
  window.beforeAfter = beforeAfter;

  // Auto-initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    const containers = document.querySelectorAll('.beforeAfter');
    if (containers.length === 0) {
      console.warn('No .beforeAfter containers found');
      return;
    }
    
    containers.forEach((container, index) => {
      console.log(`Initializing beforeAfter slider ${index + 1}`);
      beforeAfter(container, {
        movable: true,
        clickMove: true,
        alwaysShow: true,
        position: 50,
        opacity: 0.5,
        activeOpacity: 1,
        hoverOpacity: 0.75,
        separatorColor: '#02373f',
        bulletColor: '#000',
        arrowColor: '#d3f0a5'
      });
    });
  });
})();
</script>
